#pragma shader_stage(compute)

vec3 Tonemap_PBRNeutral(vec3 color)
{
  const float startCompression = 0.8 - 0.04;
  const float desaturation = 0.15;

  float x = min(color.r, min(color.g, color.b));
  float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
  color -= offset;

  float peak = max(color.r, max(color.g, color.b));
  if (peak < startCompression) 
    return color;

  const float d = 1. - startCompression;
  float newPeak = 1. - d * d / (peak + d - startCompression);
  color *= newPeak / peak;

  float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
  return mix(color, newPeak * vec3(1, 1, 1), g);
}

layout (push_constant) uniform Uniforms
{
    bool Bloom;
};

layout(local_size_x = 4, local_size_y = 4) in;
layout(binding = 0, rgba32f) restrict writeonly uniform image2D o_Image;

layout(binding = 1) uniform sampler2D screenTexture;
layout(binding = 2) uniform sampler2D bloomTexture;

void main() 
{ 
    vec2 imgSize = vec2(imageSize(o_Image));
    ivec2 invocID = ivec2(gl_GlobalInvocationID);  
    vec2 uv = vec2(float(invocID.x) / imgSize.x, float(invocID.y) / imgSize.y);
    vec2 texCoords = uv;
    texCoords += (1.f / imgSize) * 0.5f;
    
    vec3 result = texture(screenTexture, texCoords).rgb;

    if (Bloom) 
        result += texture(bloomTexture, texCoords).rgb;
    
    // Gamma correct
    result = pow(result, vec3(1.f / 2.2f));

    // HDR tonemapping  
    result = Tonemap_PBRNeutral(result);  
    
    imageStore(o_Image, invocID, vec4(result, 1.f));
}