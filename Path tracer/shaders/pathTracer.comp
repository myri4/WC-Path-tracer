#pragma shader_stage(compute)

#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require

layout(local_size_x = 4, local_size_y = 4) in;
layout(binding = 0, rgba32f) restrict writeonly uniform image2D o_Image;

struct SceneData
{
    // Camera
	mat4 InverseProjection;
	mat4 InverseView;
    vec3 position;
};

layout(buffer_reference, scalar) buffer SceneDataPointer { SceneData sceneData; };

layout(push_constant) uniform Data
{
    SceneDataPointer sdp;
};

vec3 ray_color(vec3 r) 
{
    float a = 0.5 * (r.y + 1.0);
    return mix(vec3(1.0), vec3(0.0, 0.0, 0.0), a);
}

const float bias = 0.001f;

bool raySphereIntersect(vec3 rayOrigin, vec3 rayDirection, float radius, vec3 position) 
{
    vec3 oc = rayOrigin - position;
    float a = dot(rayDirection, rayDirection);
    float half_b = dot(oc, rayDirection);
    float c = dot(oc, oc) - radius*radius;

    float discriminant = half_b*half_b - a*c;
    if (discriminant < 0.f) return false;
    float sqrtd = sqrt(discriminant);

    // Find the nearest root that lies in the acceptable range.
    float root = (-half_b - sqrtd) / a;
    
    if (root < bias || 100000.f < root) {
        root = (-half_b + sqrtd) / a;
        if (root < bias || 100000.f < root)
            return false;
    }

    return true;
}

vec3 TraceRay(vec3 rayOrigin, vec3 rayDirection)
{
    if (raySphereIntersect(rayOrigin, rayDirection, 0.5, vec3(0.0, 0.0, -1.0))) return vec3(1.0, 0.0, 0.0);
    else return ray_color(rayDirection);
}

void main()
{
    vec2 imgSize = vec2(imageSize(o_Image));

    ivec2 invocID = ivec2(gl_GlobalInvocationID);
    vec2 coord = vec2(float(invocID.x) / imgSize.x, float(invocID.y) / imgSize.y);
    coord += (1.0 / imgSize) * 0.5;

    coord.y = 1.0 - coord.y;
    coord = coord * 2.0 - 1.0; // -1 -> 1
        
    SceneData sceneData = sdp.sceneData;

    vec4 target = sceneData.InverseProjection * vec4(coord.x, coord.y, 1, 1);
    vec3 rayDirection = vec3(sceneData.InverseView * vec4(normalize(vec3(target) / target.w), 0.0));

    vec3 result = TraceRay(sceneData.position, rayDirection);

    imageStore(o_Image, ivec2(gl_GlobalInvocationID), vec4(result, 1.0));
}